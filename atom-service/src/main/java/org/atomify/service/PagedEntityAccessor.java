/*
 * Copyright (c) 2009-2016 Stephan Schloepke
 *
 * Stephan Schloepke: http://www.schloepke.de/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.atomify.service;

import java.util.List;
import java.util.UUID;

/**
 * Interface to access entities of various type to be used inside the
 * {@link AtomEntityCollectionResource}.
 * 
 * @author Stephan Schloepke
 * @since 1.0
 * @param <Entity> The type of the real entity
 * @param <EntityDelegate> The type of the entity delegate which wraps the real entity.
 */
public interface PagedEntityAccessor<EntityDelegate extends AtomEntityDelegate<?>> {

	/**
	 * Query the entity with the given identifier string.
	 * <p>
	 * The provided URI is an absolute URI as generated by the entity delegate. The implementor must
	 * know how to access the entity given the URI
	 * </p>
	 * 
	 * @param identifier The identifier to query.
	 * @return Returns the entity with the given identifier or null if the entity does not exist.
	 */
	public abstract EntityDelegate queryEntity(final String identifierPathSegment);

	/**
	 * Returns the list of entities with the max size of pageSize and the page as supplied.
	 * 
	 * @param pageSize The size of a page when querying. Zero means no paging.
	 * @param page The page number to get. If page size is zero this must also be zero.
	 * @return The list of entites for the supplied page with the supplied page size.
	 */
	public abstract List<EntityDelegate> queryPagedEntities(final int pageSize, final int page);

}
